version: '3'
#
networks:
  hyperledger-ov:
    external:
      name: hyperledger-ov
#    driver: overlay
#    ipam:
#      config:
#        - subnet: 10.200.1.0/24

services:
#  ca0:
#    image: hyperledger/fabric-ca:x86_64-1.0.0-alpha2
#    networks:
#      - hyperledger-ov
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#    environment:
#      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
#      - FABRIC_CA_SERVER_CA_NAME=ca-org1
#      - FABRIC_CA_SERVER_TLS_ENABLED=true
#      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
#      #- FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA1_PRIVATE_KEY
#      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/2286cef0216a3a337380987ca57292e8e324a68b0ac71593230ff26117e26a14_sk
#    ports:
#      - "7054:7054"
#    #command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/CA1_PRIVATE_KEY -b admin:adminpw -d'
#    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/2286cef0216a3a337380987ca57292e8e324a68b0ac71593230ff26117e26a14_sk -b admin:adminpw -d'
#    volumes:
#      - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
#    #container_name: ca_peerOrg1
#
#  ca1:
#    image: hyperledger/fabric-ca:x86_64-1.0.0-alpha2
#    networks:
#      - hyperledger-ov
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#    environment:
#      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
#      - FABRIC_CA_SERVER_CA_NAME=ca-org2
#      - FABRIC_CA_SERVER_TLS_ENABLED=true
#      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
#      #- FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA2_PRIVATE_KEY
#      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/165d8cea39bf75fa7e4fdee92302e55b0e2de704348398906a5446f31c98ff09_sk
#    ports:
#      - "8054:7054"
#    #command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/CA2_PRIVATE_KEY -b admin:adminpw -d'
#    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/165d8cea39bf75fa7e4fdee92302e55b0e2de704348398906a5446f31c98ff09_sk -b admin:adminpw -d'
#    volumes:
#      - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
#    #container_name: ca_peerOrg2

  orderer:
    deploy:
      placement:
        constraints:
          - node.role == manager
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    #container_name: orderer-example
    hostname: orderer.example.com
    image: hyperledger/fabric-orderer:x86_64-1.0.0-alpha2
    networks:
      hyperledger-ov:
        aliases:
          - orderer.example.com
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      # https://stackoverflow.com/questions/43113916/how-can-i-set-up-hyperledger-fabric-with-multiple-hosts-using-docker
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=hyperledger-ov
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
        - /nfs-share/release/linux-amd64/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - /nfs-share/release/linux-amd64/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
        - /nfs-share/release/linux-amd64/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
#    ports:
#      - "7050:7050"

  peer0_org1:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    #container_name: peer0-org1
    hostname: peer0.org1.example.com
    image: hyperledger/fabric-peer:x86_64-1.0.0-alpha2
    networks:
      hyperledger-ov:
        aliases:
          - peer0.org1.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=linuxamd64_default
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0_org1:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0_org1:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      # https://stackoverflow.com/questions/43113916/how-can-i-set-up-hyperledger-fabric-with-multiple-hosts-using-docker
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=hyperledger-ov
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start --peer-defaultchain=false
    volumes:
        - /var/run/:/host/var/run/
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
#    ports:
#      - "7051:7051"
#      - "7053:7053"

  peer1_org1:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    #container_name: peer1-org1
    hostname: peer1.org1.example.com
    image: hyperledger/fabric-peer:x86_64-1.0.0-alpha2
    networks:
      hyperledger-ov:
        aliases:
          - peer1.org1.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=linuxamd64_default
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1_org1:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1_org1:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0_org1:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      # https://stackoverflow.com/questions/43113916/how-can-i-set-up-hyperledger-fabric-with-multiple-hosts-using-docker
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=hyperledger-ov
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start --peer-defaultchain=false
    volumes:
        - /var/run/:/host/var/run/
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
#    ports:
#      - "8051:7051"
#      - "8053:7053"

  peer0_org2:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    #container_name: peer0-org2
    hostname: peer0.org2.example.com
    image: hyperledger/fabric-peer:x86_64-1.0.0-alpha2
    networks:
      hyperledger-ov:
        aliases:
          - peer0.org2.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=linuxamd64_default
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0_org2:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0_org2:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0_org2:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
      # https://stackoverflow.com/questions/43113916/how-can-i-set-up-hyperledger-fabric-with-multiple-hosts-using-docker
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=hyperledger-ov
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start --peer-defaultchain=false
    volumes:
        - /var/run/:/host/var/run/
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
#    ports:
#      - "9051:7051"
#      - "9053:7053"

  peer1_org2:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    #container_name: peer1-org2
    hostname: peer1.org2.example.com
    image: hyperledger/fabric-peer:x86_64-1.0.0-alpha2
    networks:
      hyperledger-ov:
        aliases:
          - peer1.org2.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=linuxamd64_default
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1_org2:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1_org2:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1_org2:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
      # https://stackoverflow.com/questions/43113916/how-can-i-set-up-hyperledger-fabric-with-multiple-hosts-using-docker
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=hyperledger-ov
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start --peer-defaultchain=false
    volumes:
        - /var/run/:/host/var/run/
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - /nfs-share/release/linux-amd64/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
#    ports:
#      - "10051:7051"
#      - "10053:7053"

  cli:
    deploy:
      placement:
        constraints:
          - node.role != manager
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      hyperledger-ov:
        aliases:
          - cli
    #container_name: cli
    hostname: cli
    image: hyperledger/fabric-peer:x86_64-1.0.0-alpha2
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0_org1:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
      # https://stackoverflow.com/questions/43113916/how-can-i-set-up-hyperledger-fabric-with-multiple-hosts-using-docker
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=hyperledger-ov
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    #command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'
    command: sleep 10000000
    volumes:
        - /var/run/:/host/var/run/
        - /nfs-share/release/chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
        - /nfs-share/release/linux-amd64/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - /nfs-share/release/linux-amd64/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - /nfs-share/release/linux-amd64/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer_example_com
      - peer0_org1_example_com
      - peer0_org2_example_com
      - peer1_org1_example_com
      - peer1_org2_example_com

  busybox:
    deploy:
      placement:
        constraints:
          - node.role != manager
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
        - hyperledger-ov
    #container_name: busybox
    hostname: busybox
    image: busybox
    command: sleep 3600
    volumes:
      - /nfs-share/release/linux-amd64/channel-artifacts/genesis.block:/orderer.block
    depends_on:
      - cli
      - orderer_example_com
      - peer0_org1_example_com
      - peer0_org2_example_com
      - peer1_org1_example_com
      - peer1_org2_example_com
